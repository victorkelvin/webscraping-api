name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false  

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Debug - Check project structure
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo "=== Requirements file check ==="
        if [ -f requirements.txt ]; then
          echo "requirements.txt found:"
          cat requirements.txt
        else
          echo "requirements.txt not found"
        fi
        echo "=== Test files check ==="
        if [ -f test_suite.py ]; then
          echo "test_suite.py found"
        else
          echo "test_suite.py not found"
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install basic testing dependencies
        pip install pytest pytest-cov flake8 requests
        
        # Install requirements.txt if it exists
        if [ -f requirements.txt ]; then
          echo "Installing from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing common dependencies..."
          pip install flask requests beautifulsoup4 lxml selenium webdriver-manager
        fi
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true 
    
    - name: Test with pytest
      run: |
        if [ -f test_suite.py ]; then
          python -m pytest test_suite.py -v --cov=app --cov-report=xml
        else
          echo "test_suite.py not found, skipping tests"
          exit 0
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  
      if: hashFiles('coverage.xml') != ''  

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        echo "Safety check completed"
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        echo "Bandit scan completed"
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t webscraping-api:latest .
    
    - name: Test Docker container
      run: |
        # Inicia o container em background
        docker run -d -p 5001:5000 --name test-container webscraping-api:latest
        
        # Aguarda o container inicializar
        sleep 10
        
        # Verifica se o container est√° rodando
        if docker ps | grep -q test-container; then
          echo "Container is running successfully"
        else
          echo "Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Para e remove o container de teste
        docker stop test-container
        docker rm test-container
    
    - name: Clean up Docker images
      run: |
        docker image prune -f